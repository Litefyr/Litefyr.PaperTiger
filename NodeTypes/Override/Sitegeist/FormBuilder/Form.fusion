prototype(Sitegeist.PaperTiger:Form) {
    breakout = ${q(node).property('breakout')}
    enableText = ${q(node).property('enableText')}
    float = ${q(node).property('float')}
    textMobileBottom = ${q(node).property('textMobileBottom')}
    enableHeadline = ${q(node).property('enableHeadline')}
    headlineFontSize = ${q(node).property('headlineFontSize')}
    theme = ${q(node).property('theme')}
    leftColSize = ${q(node).property('leftColSize')}
    textLeft = ${q(node).property('textLeft')}
    align = ${q(node).property('align')}
    links = Litefyr.Integration:Component.Links

    inMultiColumn = ${this.enableText}

    headline = Neos.Neos:Editable {
        property = 'headline'
        block = false
    }

    label = Neos.Neos:Editable {
        property = 'label'
        block = false
    }

    text = Neos.Neos:Editable {
        property = 'text'
    }

    anchor = ''
    inBackend = ${node.context.inBackend}

    @context {
        _currentPage = Neos.Neos:NodeUri {
            node = ${documentNode}
        }
        _nodeIdentifier = ${node.identifier}
    }

    animationMedia = Litefyr.Animations:Helper.Media
    animationText = Litefyr.Animations:Helper.Text

    renderer.runtimeForm.renderer.form {
        @cache.context {
            currentPage = '_currentPage'
            identifier  = '_nodeIdentifier'
        }
        attributes {
            x-target = ${Configuration.setting('Litefyr.PaperTiger.showFeedbackAfterSendButton') ? 'feedback_' + _nodeIdentifier : 'form_' + _nodeIdentifier}
            x-init = true
            action = ${_currentPage + _formAction}
        }

        // Add a submit button and the antispam fields per default
        process {
            schema >
            schema = Sitegeist.PaperTiger:FieldCollection.Schema {
                nodePath = 'fields'
                renderer.schemaMap.initialValue = Neos.Fusion:DataStructure {
                    corpusDelicti = ${Form.Schema.string().validator('StringLength', {minimum:0, maximum:0})}
                    errareHumanumEst = ${Form.Schema.string().isRequired().validator('RegularExpression', {regularExpression: '/^nolensVolens$/'})}
                    time = ${Form.Schema.string().isRequired().validator('Sitegeist.PaperTiger:TimestampWithHmac', {'minimumAge': 10, 'maximumAge': 86400})}
                }
            }
            content.class = "text-theme-front *:mt-8 @container transition-opacity group-[.sent]:opacity-50 group-[.sent]:pointer-events-none"
            content.@process.spamProtection = Neos.Fusion:Component {
                alpine = Neos.Fusion:DataStructure {
                    t = ''
                    h = ''
                    'g()' = "{if(!this.h){this.h='nolensVolens';window.fetch('/~form/hmac',{'method':'HEAD'}).then(r=>{this.t=r.headers.get('Hmac')})}}"
                }

                renderer = afx`
                    {value}
                    <div
                        x-data={AlpineJS.object(props.alpine)}
                        'x-on:touchstart.window.once'="g"
                        'x-on:keydown.window.once'="g"
                        'x-on:mousemove.window.once'="g"
                        'x-on:touchmove.window.once'="g"
                        class="!hidden"
                    >
                        <Neos.Fusion.Form:FieldContainer
                            label={Translation.translate('field.corpusDelicti', null, [], 'Main', 'Litefyr.PaperTiger')}
                            labelRenderer="Sitegeist.PaperTiger:Label"
                            field.name="corpusDelicti"
                        >
                            <Neos.Fusion.Form:Input attributes.autocomplete="off" attributes.tabindex="-1" attributes.id={'field_' + field.getName()} />
                        </Neos.Fusion.Form:FieldContainer>
                        <Neos.Fusion.Form:FieldContainer
                            label={Translation.translate('field.errareHumanumEst', null, [], 'Main', 'Litefyr.PaperTiger')}
                            labelRenderer="Sitegeist.PaperTiger:Label"
                            field.name="errareHumanumEst"
                        >
                            <Neos.Fusion.Form:Input
                                attributes.autocomplete="off"
                                attributes.tabindex="-1"
                                attributes.x-model="h"
                                attributes.id={'field_' + field.getName()}
                            />
                        </Neos.Fusion.Form:FieldContainer>
                        <Neos.Fusion.Form:Hidden
                            field.name="time"
                            attributes.x-model="t"
                        />
                </div>
                `
            }
            footer = Litefyr.PaperTiger:Component.SendButton
        }
    }

    // Backend rendering
    renderer.backend.renderer >
    renderer.backend.renderer = afx`
        <Litefyr.Presentation:Spacing padding={!props.inMultiColumn}>
            <h2 class="border-b border-theme-front text-2xl text-theme-front mt-8 mb-4 pb-4 flex gap-4 items-center">
                <span class="flex items-center justify-center bg-theme-front text-base text-theme-back rounded-full text-center min-w-8 min-h-8">1</span>
                {Carbon.Backend.translate('form.formFields.header', null, [], 'Main', 'Sitegeist.PaperTiger')}
            </h2>
        </Litefyr.Presentation:Spacing>
        <form class={_formClass}>
            <Sitegeist.PaperTiger:FieldCollection.Renderer
                nodePath="fields"
                class="text-theme-front *:mt-8 @container transition-opacity group-[.sent]:opacity-50 group-[.sent]:pointer-events-none"
            />
            <Litefyr.PaperTiger:Component.SendButton />
        </form>
        <Litefyr.Presentation:Spacing padding={!props.inMultiColumn} tailwind="text-theme-front">
            <h2 class="border-b border-theme-front text-2xl text-theme-front mt-8 mb-4 pb-4 flex gap-4 items-center">
                <span class="flex items-center justify-center bg-theme-front text-base text-theme-back rounded-full text-center min-w-8 min-h-8">2</span>
                {Carbon.Backend.translate('form.followUpActions.header', null, [], 'Main', 'Sitegeist.PaperTiger')}
            </h2>
            <Sitegeist.PaperTiger:ActionCollection.Fieldnames nodePath="fields" />
            <Sitegeist.PaperTiger:ActionCollection.Preview nodePath="actions" attributes.class="prose" />
        </Litefyr.Presentation:Spacing>
    `

    fileLoader = Carbon.FileLoader:Strategy.Attributes {
        package = 'Litefyr.Presentation'
        js = 'Ajax.js'
        eventOnLoad = 'presentation:init'
    }

    renderer.@process {
        spacing = afx`
            <Litefyr.Presentation:Spacing
                padding={!props.inMultiColumn}
                class="w-full has-prose group aria-busy:pointer-events-none"
                :class="locked&&'sent'"
                id={"form_" + node.identifier}
                x-data="{submitting:false,locked:false,sent:false}"
                x-on:ajax:send="submitting=true;locked=true"
                x-on:ajax:sent="submitting=false;sent=true"
                "x-merge.transition"="update"
                content={value}
                animationMedia={props.inMultiColumn ? null : props.animationMedia}
                {...props.fileLoader}
            />
        `

        // Add Text field
        textField = Litefyr.Presentation:Module.TextWithContent {
            @if.enable = ${props.enableText}

            align = ${props.align}
            breakout = ${props.breakout}
            enableHeadline = ${props.enableHeadline}
            headlineFontSize = ${props.headlineFontSize}
            theme = ${props.theme}
            leftColSize = ${props.leftColSize}
            textLeft = ${props.textLeft}
            links = ${props.links}
            headline = ${props.headline}
            label = ${props.label}
            text = ${props.text}
            inBackend = ${props.inBackend}
            content = ${value}
            animationText = ${props.animationText}
            animationMedia = ${props.animationMedia}
            float = ${props.float}
            textMobileBottom = ${props.textMobileBottom}
        }
    }
}
